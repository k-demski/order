version: '3.4'
networks:
  backend:
    driver: bridge
services:
  #zookeeper:
  #  container_name: zookeeper
  #  image: confluentinc/cp-zookeeper:6.2.0
  #  networks:
  #    - backend
  #  ports:
  #    - "2181:2181"
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181
  #    ZOOKEEPER_TICK_TIME: 2000
  #kafka:
  #  container_name: kafka
  #  hostname: kafka
  #  image: confluentinc/cp-kafka:6.2.0
  #  networks:
  #    - backend
  #  ports:
  #    - "9092:9092"
  #  environment:
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #    KAFKA_LISTENERS: PLAINTEXT://:9092
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #  volumes:
  #    - ./docker-data/kafka:/var/lib/kafka/data
  #  depends_on:
  #    - zookeeper
  redis-master:
    container_name: "redis-master"
    image: redis:6.0-alpine
    command: redis-server
    networks:
      - backend
    ports:
      - "6379:6379"
    volumes:
      - ./Redis/redis-master.conf:/usr/local/etc/redis/redis.conf
      - ./Redis/redis-m-data:/var/lib/redis
  redis-n1:
    container_name: redis-n1
    image: redis:6.0-alpine
    command: redis-server --slaveof redis-master 6379
    networks:
      - backend
    ports:
      - 6380:6379
    volumes:
      - ./Redis/redis-n1-data:/var/lib/redis
  redis-n2:
    container_name: redis-n2
    image: redis:6.0-alpine
    command: redis-server --slaveof redis-master 6379
    networks:
      - backend
    ports:
      - 6381:6379
    volumes:
      - ./Redis/redis-n2-data:/var/lib/redis
  redis-sentinel1:
    container_name: 'redis-sentinel1'
    image: redis:6.0-alpine
    networks:
      - backend
    ports:
      - "5000:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./Redis/sentinel.conf:/etc/sentinel.conf"
  redis-sentinel2:
    container_name: 'redis-sentinel2'
    image: redis:6.0-alpine
    networks:
      - backend
    ports:
      - "5001:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./Redis/sentinel.conf:/etc/sentinel.conf"
  redis-sentinel3:
    container_name: 'redis-sentinel3'
    image: redis:6.0-alpine
    networks:
      - backend
    ports:
      - "5002:5000"
    command: redis-server /etc/sentinel.conf --sentinel
    volumes:
      - "./Redis/sentinel.conf:/etc/sentinel.conf"
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8-management
    networks:
      - backend
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./docker-data/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=krzys
      - RABBITMQ_DEFAULT_PASS=1qaz@WSX3edc
  mongodborderdetail:
    container_name: mongodborderdetail
    image: mongo
    restart: always
    networks:
      - backend
    ports:
      - "27017:27017"
    volumes:
      - ./docker-data/mongodb:/data/db
  mysqlorder:
    container_name: mysqlorder
    image: mysql:8.0.33
    networks:
      - backend
    ports:
      - 3306:3306
    volumes:
      - ./docker-data/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=1qaz@WSX3edc
      - MYSQL_DATABASE=order
      - MYSQL_USER=krzys
      - MYSQL_PASSWORD=1qaz@WSX3edc
  restorders:
    container_name: restorders-api
    image: ${DOCKER_REGISTRY-}restorders
    build:
      context: .
      dockerfile: RestOrders/Dockerfile
    depends_on:
      #- zookeeper
      #- kafka
      - redis-master
      - rabbitmq
      - mongodborderdetail
    networks:
      - backend
    ports:
      - 8004:80
    environment:
      - DB_HOST=mongodborderdetail
      - DB_PORT=27017
      - DB_NAME=orderdetail
      - DB_USER=root
      - DB_PASSWORD=1qaz@WSX3edc
      - KAFKA_SERVER=kafka:9092
      - KAFKA_TOPIC=orders
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=krzys
      - RABBITMQ_PASSWORD=1qaz@WSX3edc
      - RABBITMQ_QUEUE_NAME=orders
      - REDIS_MASTER_PASSWORD=f4ae6589-bd87-4455-8eb1-7fb6cac06386
      - REDIS_DATABASE=3
      - SENTINEL_SERVICENAME=mymaster
      - SENTINEL_1_HOST=redis-sentinel1
      - SENTINEL_1_PORT=5000
      - SENTINEL_2_HOST=redis-sentinel2
      - SENTINEL_2_PORT=5001
      - SENTINEL_3_HOST=redis-sentinel3
      - SENTINEL_3_PORT=5002
  orderseventhandler:
    container_name: orderseventhandler
    image: ${DOCKER_REGISTRY-}orderseventhandler
    build:
      context: .
      dockerfile: OrdersEventHandler/Dockerfile
    depends_on:
      #- zookeeper
      #- kafka
      - rabbitmq
      - mysqlorder
      - restorders
    networks:
      - backend
    environment:
      - DB_HOST=mysqlorder
      - DB_PORT=3306
      - DB_NAME=order
      - DB_USER=root
      - DB_PASSWORD=1qaz@WSX3edc
      - KAFKA_SERVER=kafka:9092
      - KAFKA_TOPIC=orders
      - KAFKA_GROUPID=orders_events_groupid
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=krzys
      - RABBITMQ_PASSWORD=1qaz@WSX3edc
      - RABBITMQ_QUEUE_NAME=orders